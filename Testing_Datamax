Process started at:  2020-04-03 11:15:47.504462
Limited Annotated Training
Output Length:  torch.Size([40, 1])
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([40])
Answer:  tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Process started at:  2020-04-03 11:18:22.136055
Limited Annotated Training
Output Length:  torch.Size([40, 1])
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([40])
Answer:  tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Process started at:  2020-04-03 14:44:24.159410
Limited Annotated Training
Process started at:  2020-04-16 23:04:30.105010
Limited Annotated Training
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.4504, -0.3391, -0.4723,  0.4425, -0.5881,  0.1000, -0.1123, -0.0781,
          0.2396,  0.8066,  0.0058,  0.1694, -0.6385,  0.3846,  0.2071,  0.3233,
         -0.4704,  0.2197,  0.4875,  0.3357, -0.0435,  0.0631,  0.1100,  0.6323,
          0.1502, -0.0809, -0.3537, -0.0548, -0.3374,  0.1179, -0.7469,  0.0144,
         -0.1356, -0.0381, -0.6393, -0.1236,  0.2384,  0.4059, -0.4306,  0.1458]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([1])
Successful Loss:  tensor(4.1015, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.4612, -0.3476, -0.4870,  0.4589, -0.5747,  0.1181, -0.1050, -0.0875,
          0.2337,  0.7965,  0.0130,  0.1855, -0.6425,  0.3908,  0.2151,  0.3192,
         -0.4843,  0.2342,  0.4731,  0.3407, -0.0362,  0.0520,  0.1052,  0.6343,
          0.1352, -0.0865, -0.3663, -0.0476, -0.3171,  0.0995, -0.7410,  0.0162,
         -0.1186, -0.0400, -0.6416, -0.1285,  0.2578,  0.4183, -0.4303,  0.1454]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([20])
Successful Loss:  tensor(3.8003, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.1677, -0.4213, -0.3934,  0.3697, -0.2058, -0.1369,  0.2732,  0.0422,
          0.1089,  0.5624,  0.0707, -0.1135, -0.1175,  0.1722,  0.2412,  0.3573,
         -0.5246,  0.0677, -0.0377,  0.2432,  0.0556, -0.0418,  0.0240,  0.3430,
          0.2801,  0.0499,  0.2120, -0.0305,  0.0588, -0.1806, -0.4409,  0.2165,
          0.0661, -0.4798, -0.3440, -0.0690,  0.3683,  0.4761,  0.1399,  0.0264]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([2])
Successful Loss:  tensor(4.1521, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.1526, -0.4139, -0.4019,  0.3769, -0.2140, -0.1357,  0.2578,  0.0278,
          0.1171,  0.5577,  0.0793, -0.1025, -0.1244,  0.1782,  0.2154,  0.3502,
         -0.5307,  0.0760, -0.0350,  0.2352,  0.0508, -0.0400,  0.0412,  0.3464,
          0.2831,  0.0603,  0.2164, -0.0084,  0.0421, -0.1897, -0.4293,  0.1864,
          0.0690, -0.4926, -0.3409, -0.0914,  0.3666,  0.4580,  0.1317,  0.0146]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([13])
Successful Loss:  tensor(3.5771, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.0273, -0.0765,  0.2264, -0.1311, -0.3636, -0.4048,  0.0201, -0.1769,
         -0.0406,  0.4057, -0.1123,  0.0939, -0.0974,  0.3293,  0.2362, -0.0254,
         -0.3753,  0.2489,  0.5008,  0.0045,  0.3150, -0.0218, -0.4250,  0.0159,
          0.0685, -0.2247, -0.2175, -0.1843, -0.0934, -0.0091, -0.1588, -0.2446,
         -0.0656, -0.1169, -0.3751, -0.0994,  0.3324,  0.1201, -0.0079,  0.2934]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([17])
Successful Loss:  tensor(3.4464, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.4509, -0.5708, -0.1196, -0.1294, -0.4785, -0.1647,  0.3964,  0.0313,
         -0.3571,  0.5932,  0.0198, -0.0346, -0.3022,  0.3501,  0.4623,  0.2356,
         -0.2650,  0.0542,  0.0772,  0.0600,  0.1924,  0.2356, -0.1774,  0.3042,
         -0.2570, -0.2847,  0.1177, -0.1697, -0.0476,  0.4703, -0.5293,  0.1104,
         -0.3114, -0.0455, -0.4053,  0.3037,  0.6810,  0.3824,  0.3809,  0.3338]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([12])
Successful Loss:  tensor(4.0817, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.4487, -0.5526, -0.1146, -0.1476, -0.4672, -0.1775,  0.4061,  0.0394,
         -0.3543,  0.5768,  0.0155, -0.0312, -0.2978,  0.3500,  0.4677,  0.2332,
         -0.2624,  0.0607,  0.0680,  0.0673,  0.2138,  0.2335, -0.1728,  0.2931,
         -0.2595, -0.2895,  0.1263, -0.1593, -0.0459,  0.4588, -0.5171,  0.1096,
         -0.3019, -0.0568, -0.4000,  0.3040,  0.6940,  0.3701,  0.3765,  0.3272]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([12])
Successful Loss:  tensor(4.0776, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.6059, -0.2288, -0.5196,  0.4832, -0.3000, -0.0303, -0.2009, -0.2841,
          0.3920,  0.7642,  0.1360, -0.1372, -0.3512, -0.1350,  0.1913,  0.1955,
         -0.5825,  0.0234,  0.2112,  0.4023,  0.0143, -0.0432, -0.1760,  0.0144,
         -0.0477, -0.4636, -0.2934, -0.1444,  0.1245, -0.4860, -0.4982, -0.2790,
         -0.1624, -0.6551, -0.3224, -0.2722,  0.3729,  0.2124, -0.0104,  0.0207]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([7])
Successful Loss:  tensor(3.9673, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 0.6020, -0.2271, -0.5295,  0.4917, -0.2851, -0.0335, -0.1985, -0.2895,
          0.3629,  0.7446,  0.1278, -0.1353, -0.3679, -0.1348,  0.1994,  0.2014,
         -0.5882,  0.0189,  0.2081,  0.3913,  0.0149, -0.0498, -0.2007,  0.0135,
         -0.0461, -0.4571, -0.2969, -0.1489,  0.1306, -0.5027, -0.5052, -0.3014,
         -0.1639, -0.6743, -0.3262, -0.2677,  0.3663,  0.2081, -0.0158,  0.0120]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([15])
Successful Loss:  tensor(3.4768, grad_fn=<NllLossBackward>)
Output Length:  torch.Size([1, 40])
Output:  tensor([[ 6.0209e-02, -1.4384e-01, -3.0867e-01,  1.9988e-01, -1.5703e-01,
          1.1914e-02,  3.9726e-03, -6.6839e-02, -2.2169e-02,  6.2651e-01,
          5.5896e-04, -8.7444e-02, -8.2335e-02,  2.7118e-03,  4.2723e-02,
          3.2760e-01, -2.7317e-01,  3.4922e-01,  8.9012e-02,  3.1704e-02,
          4.1805e-02, -4.0872e-02,  5.9257e-02,  2.0292e-01, -5.9977e-02,
         -3.1599e-01, -1.3103e-01, -2.5449e-02,  7.8557e-02,  1.5475e-01,
         -2.9774e-01,  4.2465e-02,  1.4658e-02, -2.3739e-02, -2.0312e-01,
          2.3295e-01,  2.4350e-01,  2.6367e-01,  3.3092e-01,  1.2107e-02]],
       grad_fn=<UnsqueezeBackward1>)
Predicted Value:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Answer Length:  torch.Size([1])
Answer:  tensor([9])
Successful Loss:  tensor(3.1115, grad_fn=<NllLossBackward>)
